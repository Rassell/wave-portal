{"version":3,"sources":["App.tsx","index.tsx"],"names":["contractAddress","App","useState","message","setMessage","currentAccount","setCurrentAccount","allWaves","setAllWaves","checkIfWalletIsConnected","a","window","ethereum","console","log","request","method","accounts","length","account","getAllWaves","alert","provider","ethers","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","contractABI","getTotalWaves","count","toNumber","wave","gasLimit","waveTxn","hash","wait","waves","wavesCleaned","forEach","push","address","waver","timestamp","Date","useEffect","onNewWave","from","prevState","on","off","init","className","type","value","onChange","e","target","onClick","map","index","key","style","backgroundColor","marginTop","padding","toString","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.82711927.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\n\nimport \"./App.css\";\n\nimport { abi as contractABI } from \"./assets/WavePortal.json\";\nconst contractAddress = \"0xc4f55d993BD92Fbd4a167F76E3236bA9ce8AB4DA\";\n\nexport default function App() {\n  const [message, setMessage] = useState(\"\");\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  /*\n   * All state property to store all waves\n   */\n  const [allWaves, setAllWaves] = useState<any[]>([]);\n\n  async function checkIfWalletIsConnected() {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have metamask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account);\n        getAllWaves();\n      } else {\n        console.log(\"No authorized account found\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async function connectWallet() {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async function wave() {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          signer\n        );\n\n        let count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n\n        const waveTxn = await wavePortalContract.wave(message, {\n          gasLimit: 300000,\n        });\n        console.log(\"Mining...\", waveTxn.hash);\n\n        await waveTxn.wait();\n        console.log(\"Mined -- \", waveTxn.hash);\n\n        count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async function getAllWaves() {\n    try {\n      const { ethereum } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          signer\n        );\n\n        /*\n         * Call the getAllWaves method from your Smart Contract\n         */\n        const waves = await wavePortalContract.getAllWaves();\n\n        /*\n         * We only need address, timestamp, and message in our UI so let's\n         * pick those out\n         */\n        let wavesCleaned: any = [];\n        waves.forEach((wave: any) => {\n          wavesCleaned.push({\n            address: wave.waver,\n            timestamp: new Date(wave.timestamp * 1000),\n            message: wave.message,\n          });\n        });\n\n        /*\n         * Store our data in React State\n         */\n        setAllWaves(wavesCleaned);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  useEffect(() => {\n    async function init() {\n      await checkIfWalletIsConnected();\n\n      let wavePortalContract: any;\n\n      const onNewWave = (from: string, timestamp: number, message: string) => {\n        console.log(\"NewWave\", from, timestamp, message);\n        setAllWaves((prevState) => [\n          ...prevState,\n          {\n            address: from,\n            timestamp: new Date(timestamp * 1000),\n            message: message,\n          },\n        ]);\n      };\n\n      if (window.ethereum) {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n\n        wavePortalContract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          signer\n        );\n        wavePortalContract.on(\"NewWave\", onNewWave);\n      }\n\n      return () => {\n        if (wavePortalContract) {\n          wavePortalContract.off(\"NewWave\", onNewWave);\n        }\n      };\n    }\n\n    init();\n  }, []);\n\n  return (\n    <div className=\"mainContainer\">\n      <div className=\"dataContainer\">\n        <div className=\"header\">ðŸ‘‹ Hey there!</div>\n\n        <div className=\"bio\">\n          I am farza and I worked on self-driving cars so that's pretty cool\n          right? Connect your Ethereum wallet and wave at me!\n        </div>\n\n        <div>\n          <label>\n            Message\n            <input\n              type=\"text\"\n              value={message}\n              onChange={(e) => setMessage(e.target.value)}\n            />\n          </label>\n          <button className=\"waveButton\" onClick={wave}>\n            Wave at Me\n          </button>\n        </div>\n\n        {/*\n         * If there is no currentAccount render this button\n         */}\n        {!currentAccount && (\n          <button className=\"waveButton\" onClick={connectWallet}>\n            Connect Wallet\n          </button>\n        )}\n\n        {allWaves.map((wave, index) => {\n          return (\n            <div\n              key={index}\n              style={{\n                backgroundColor: \"OldLace\",\n                marginTop: \"16px\",\n                padding: \"8px\",\n              }}\n            >\n              <div>Address: {wave.address}</div>\n              <div>Time: {wave.timestamp.toString()}</div>\n              <div>Message: {wave.message}</div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}